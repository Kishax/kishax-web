generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String? // 表示名（OAuthプロバイダーの名前）
  username      String?   @unique // 公開ユーザー名（ユーザーが入力）
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?
  customAvatar  String?   @map("custom_avatar")
  discordId     String?   @map("discord_id")
  avatar        String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  accounts         Account[]
  sessions         Session[]
  tasks            Task[]
  members          Member[]
  minecraftPlayers MinecraftPlayer[]
  userProducts     UserProduct[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Task {
  id      Int    @id @default(autoincrement())
  userId  String @map("user_id")
  content String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("tasks")
}

model Member {
  id       Int     @id @default(autoincrement())
  name     String
  uuid     String
  confirm  Boolean @default(false)
  secret2  String?
  memberId String? @map("member_id")
  user     User?   @relation(fields: [memberId], references: [id])

  @@map("members")
}

model Counter {
  id        Int      @id @default(autoincrement())
  count     Int      @default(0)
  date      DateTime @default(now())
  createdAt DateTime @default(now()) @map("created_at")

  @@map("counters")
}

model Status {
  id         Int     @id @default(autoincrement())
  name       String  @unique
  playerList String? @map("player_list")

  @@map("status")
}

model MinecraftPlayer {
  id           String    @id @default(cuid())
  mcid         String    @unique
  uuid         String    @unique
  authToken    String?   @map("auth_token")
  tokenExpires DateTime? @map("token_expires")
  otp          String?   @map("otp")
  otpExpires   DateTime? @map("otp_expires")
  confirmed    Boolean   @default(false)
  kishaxUserId String?   @map("kishax_user_id")
  user         User?     @relation(fields: [kishaxUserId], references: [id])
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  @@map("minecraft_players")
}

model Product {
  id          String        @id @default(cuid())
  name        String        @unique
  description String?
  price       Decimal?      @db.Decimal(10, 2)
  type        ProductType
  status      ProductStatus @default(ACTIVE)
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")

  userProducts UserProduct[]

  @@map("products")
}

model UserProduct {
  id              String            @id @default(cuid())
  userId          String            @map("user_id")
  productId       String            @map("product_id")
  status          UserProductStatus @default(ACTIVE)
  purchasedAt     DateTime          @default(now()) @map("purchased_at")
  expiresAt       DateTime?         @map("expires_at")
  cancelledAt     DateTime?         @map("cancelled_at")
  lastPaymentAt   DateTime?         @map("last_payment_at")
  nextPaymentAt   DateTime?         @map("next_payment_at")
  paymentMethod   String?           @map("payment_method")
  externalOrderId String?           @map("external_order_id")

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("user_products")
}

enum ProductType {
  ONETIME
  SUBSCRIPTION
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum UserProductStatus {
  ACTIVE
  EXPIRED
  CANCELLED
  PENDING
}
